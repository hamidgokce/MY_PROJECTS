AWSTemplateFormatVersion: 2010-09-09
Description: | 
  Bu template, ASG, ELB oluşturmaktadir. Basit bir applicatin EC2 lar üzerinde çalışmakta ve 
  ALB tarafından trafik yönlendirilmektedir. ASG, target traccing  policy ile siteyi izlemekte ve 
  ortalama CPU değerini takip etmektedir # Version bilgisidir. Herbir version yayinlaninca versionla
  birlikte yeni ozellikler gelir. Eski version yeni
# version ozelliklerini calistirmayabilir.

Parameters: # User in belirlemesini istediginiz parametrelerdir. Mesela key.name veya Vpc dir. User a ait bilgilerdir.
  VpcIP: #  ParameterName olarak yazdik
    Description: VpcId of your existing Virtual Private Cloud (VPC) # Kullaniciya instruction veririz
    Type: AWS::EC2::VPC::Id  # kullanicimiza vpc leri liste olarak doker
  Subnets: # Bu isimler onemlidir. ilerde referans tuttugumuzda gerekecektir.
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: List<AWS::EC2::Subnet::Id> # liste halinde butun subnetleri doker. Basta list olursa coklu secim yapabiliyoruz ama yukarida yok idi
  InstanceType:
    Description: WebServer EC2 instance type. Avrupa sampiyonu italya  # kisinin karsisina cikacak olan yazidir. 
    # Parametleri belirlerken yonlendirme yazisidir
    Type: String
    Default: t2.micro # kisiye asagidaki menu cikacaktir ama default degeri t2.micro dur.
    AllowedValues:
      - t2.micro
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
    ConstraintDescription: must be a valid EC2 instance type that we gave.  # user parametre girerken yukaridaki 5 degere izin vermis. Eger farkli
  # deger yazarsa yukaridaki yazi karsisina cikacaktir. 
  KeyName:  # cloudformation calistiracagimizda SSH i acalim ki sonra kontrol edebilme imkanimiz olsun
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  PolicyTargetValue:
    Description: Please enter your Target value that triggers the Autoscaling.
    Default: '60'
    Type: String
  

Resources: # Cloudformationun olmazsa olmazidir. Kesinlikle yazilmasi gerekmektedir. Ilk olusturacagimiz kisim security group olmasi gerekmektedir. 
  mySecurityGroup:  # LogicalID: # security-group ec2 yazilinca cikmaktadir. Her resourcenin kendine ait bir ID si olur. Burada o ismi belirleyecegiz.
    Type: AWS::EC2::SecurityGroup  # adreslemedir ve hangi resource oldugunu gostermektedir.
    Properties:
      GroupDescription: Enables SSH and HTTP for EC2s and ALB.
      SecurityGroupIngress: # inbound
        - IpProtocol: tcp
          FromPort: 22  # belirli bir port araligi acabiliriz
          ToPort: 22
          CidrIp: 0.0.0.0/0 # source kismidir
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  myApplicationLoadBalancer: # loadbalancer ekliyoruz version2 iyi seciyoruz. LogicalID ismi default geliyor ve degistiriyoruz.
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4 #"String" eger ipv6 kullanacak olsaydi ipv6 yazardik
      SecurityGroups: # atayacagimiz grup listener ve target in portlarini icermelidir. liste halinde yazilir mySecurityGroup un grup id sini alacagiz
        - !GetAtt mySecurityGroup.GroupId # SecurityGroups
      Subnets: !Ref Subnets # yukarida sectigimiz subnetleri buraya yapistirmis olduk. Bunu yapmazsak teker teker subnet id lerini yapistirmak gerekir

  myALBTargetGroup: #LogicalID: # elasticloadbalancertarget yazdigimizda cikar. Healthcheck kisminda bir sey belirtmezsek konsoldaki defaul degerlerini alir. 
  # alt pathleride takip edecek dizin olusturulabilir ' / '
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcIP

  myALBListener: # LogicalID: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: # Required bu listener ile trafigi asagidaki gruba forward edecegiz diyebiliriz
        - Type: forward # DefaultActions
          TargetGroupArn: !Ref myALBTargetGroup
      LoadBalancerArn: !Ref myApplicationLoadBalancer # "String" # Required ==> listener hangi loadbalancer a bagli
      Port: 80 # Number listener in nereyi dinleyecegiz
      Protocol: HTTP

  myCPUPolicy: # LogicalID: # scalingpolicy yazarsak cikar
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref myAutoScalingGroup # "String" # Required ==> asagidaki autoscaling i burada tanimlamis olduk
      PolicyType: TargetTrackingScaling  # "String" # targettrackingscaling, step veya simple scaling type vardir defaul simple scalingdir.
      TargetTrackingConfiguration: # ortalama CPU ya gore scale et 
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref PolicyTargetValue # Number # User in belirlemesini istiyoruz. Ve yukariya yazacagiz parametreleri (satir 28) 
 

  myAutoScalingGroup:  # LogicalID:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs "" # ==> seklinde yazilirsa uzerinde calismasini istedigimiz availibility zonelari gosterir. 
      # Bos string tanimlarsak tum zone lar oldugunu soylemekteyiz
      LaunchConfigurationName: !Ref mylaunchConfig
      HealthCheckType: ELB  # "String" ==> ec2 lari da elb leri de takip ettirebiliriz. ELB ile ayni healthcheck i kullanmamiza yariyor
      HealthCheckGracePeriod: 300
      DesiredCapacity: 2
      MinSize: 1  # "String" # Required
      MaxSize: 3 # "String" # Required CPU sayisi 3 u gecmez
      TargetGroupARNs: # Hangi target grubu takip et anlamindadir 
        - !Ref myALBTargetGroup  # TargetGroupARNs
  mylaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0dc2d3e4c0f9ebd18 # Required
      InstanceType: !Ref InstanceType  # Required
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref mySecurityGroup
      UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
          DATE_TIME=`date`
          chmod -R 777 /var/www/html
          echo "<html>
          <head>
              <title> Congratulations! You have created an instance from Launch Configuration</title>
          </head>
          <body>
              <h1>This web server is launched from launch configuration by YOUR_NAME</h1>
              <p>This instance is created at <b>$DATE_TIME</b></p>
              <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
              <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
          </body>
          </html>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join  # verdigimiz degerleri birbirine yapistirir. HTTP nin arkasina yapistirir
      - ''
      - - 'http://'
        - !GetAtt myApplicationLoadBalancer.DNSName # EC2 ayaga kaldirdik ve sayfanin calisip calismadigina bakmak icin IP sini alacagiz ve browser yapistiracagiz. Bunun yerine bu bolume bana public IP yi getir
# ve bu bolume yapistir diyoruz. Bu sayede direk buradan link tiklanarak da kolaylikla acilabilir.

